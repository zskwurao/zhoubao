<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zypc.weekly.mapper.ReplyActicleMapper" >
  <resultMap id="BaseResultMap" type="com.zypc.weekly.pojo.ReplyActicle" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="a_id" property="aId" jdbcType="INTEGER" />
    <result column="u_id" property="uId" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="is_read" property="isRead" jdbcType="BIT" />
    <result column="txt" property="txt" jdbcType="LONGVARCHAR" />
  </resultMap>
  
  <insert id="addReplyArticle" parameterType="ReplyActicle" >
    insert into reply_acticle (id, a_id, u_id, 
      create_time, is_read, txt
      )
    values (#{id,jdbcType=INTEGER}, #{aId,jdbcType=INTEGER}, #{uId,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{isRead,jdbcType=BIT}, #{txt,jdbcType=LONGVARCHAR}
      )
  </insert>
  
  <delete id="deleteReply" parameterType="Integer">
  	delete from reply_acticle where a_id = #{id}
  </delete>
  
  <select id="getreplyArticleList" parameterType="String" resultMap="BaseResultMap">
  	SELECT a.`id`,a.`a_id`,a.`u_id`,a.`create_time`,a.`is_read`,a.`txt` 
  	FROM reply_acticle a LEFT JOIN article b
  	 ON a.`a_id`=b.`id` 
  	 WHERE b.`u_id`=#{id} ORDER BY a.`create_time` DESC
  </select>
  
  <select id="getreplyArticleListByaId" parameterType="Integer" resultMap="BaseResultMap">
  	select * from reply_acticle where a_id = #{aId}
  </select>
  
  <select id="selectCount" parameterType="Integer" resultType="Integer">
  	select count(*) from reply_acticle where a_id = #{aId} and is_read = 0
  </select>
  
  <update id="updateReplyIsRead" parameterType="Integer">
  	update reply_acticle set is_read = 1 where id = #{id}
  </update>
  
  <!-- <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, a_id, u_id, create_time, is_read
  </sql>
  <sql id="Blob_Column_List" >
    txt
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.zypc.weekly.pojo.ReplyActicleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from reply_acticle
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.zypc.weekly.pojo.ReplyActicleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from reply_acticle
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from reply_acticle
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from reply_acticle
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zypc.weekly.pojo.ReplyActicleExample" >
    delete from reply_acticle
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zypc.weekly.pojo.ReplyActicle" >
    insert into reply_acticle (id, a_id, u_id, 
      create_time, is_read, txt
      )
    values (#{id,jdbcType=INTEGER}, #{aId,jdbcType=INTEGER}, #{uId,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{isRead,jdbcType=BIT}, #{txt,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zypc.weekly.pojo.ReplyActicle" >
    insert into reply_acticle
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="aId != null" >
        a_id,
      </if>
      <if test="uId != null" >
        u_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="isRead != null" >
        is_read,
      </if>
      <if test="txt != null" >
        txt,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="aId != null" >
        #{aId,jdbcType=INTEGER},
      </if>
      <if test="uId != null" >
        #{uId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isRead != null" >
        #{isRead,jdbcType=BIT},
      </if>
      <if test="txt != null" >
        #{txt,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zypc.weekly.pojo.ReplyActicleExample" resultType="java.lang.Integer" >
    select count(*) from reply_acticle
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update reply_acticle
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.aId != null" >
        a_id = #{record.aId,jdbcType=INTEGER},
      </if>
      <if test="record.uId != null" >
        u_id = #{record.uId,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isRead != null" >
        is_read = #{record.isRead,jdbcType=BIT},
      </if>
      <if test="record.txt != null" >
        txt = #{record.txt,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update reply_acticle
    set id = #{record.id,jdbcType=INTEGER},
      a_id = #{record.aId,jdbcType=INTEGER},
      u_id = #{record.uId,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      is_read = #{record.isRead,jdbcType=BIT},
      txt = #{record.txt,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update reply_acticle
    set id = #{record.id,jdbcType=INTEGER},
      a_id = #{record.aId,jdbcType=INTEGER},
      u_id = #{record.uId,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      is_read = #{record.isRead,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zypc.weekly.pojo.ReplyActicle" >
    update reply_acticle
    <set >
      <if test="aId != null" >
        a_id = #{aId,jdbcType=INTEGER},
      </if>
      <if test="uId != null" >
        u_id = #{uId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isRead != null" >
        is_read = #{isRead,jdbcType=BIT},
      </if>
      <if test="txt != null" >
        txt = #{txt,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.zypc.weekly.pojo.ReplyActicle" >
    update reply_acticle
    set a_id = #{aId,jdbcType=INTEGER},
      u_id = #{uId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      is_read = #{isRead,jdbcType=BIT},
      txt = #{txt,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zypc.weekly.pojo.ReplyActicle" >
    update reply_acticle
    set a_id = #{aId,jdbcType=INTEGER},
      u_id = #{uId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      is_read = #{isRead,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update> -->
</mapper>